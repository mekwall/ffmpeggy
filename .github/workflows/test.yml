name: test

on:
  workflow_call:
    inputs:
      node-version:
        required: true
        type: string
      os:
        required: true
        type: string
      debug:
        required: false
        type: boolean
        default: false
      coverage:
        required: false
        type: boolean
        default: false

jobs:
  test-unit:
    name: test-unit
    runs-on: ${{ inputs.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install dependencies
        run: yarn install

      - name: Run unit tests
        shell: bash
        run: yarn test:unit ${{ inputs.coverage && '--coverage' || '' }}
        env:
          DEBUG: ${{ inputs.debug && '*' || '' }}

      - name: Upload coverage (if generated)
        if: inputs.coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.run_id }}-unit
          path: coverage/

      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Vitest Unit Tests
          path: test-results.xml
          reporter: java-junit
          fail-on-error: false

  test-async-integration:
    name: test-async-integration
    runs-on: ${{ inputs.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install dependencies
        run: yarn install

      - name: Run async integration tests
        shell: bash
        run: yarn test:async ${{ inputs.coverage && '--coverage' || '' }}
        env:
          DEBUG: ${{ inputs.debug && '*' || '' }}

      - name: Upload coverage (if generated)
        if: inputs.coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.run_id }}-async
          path: coverage/

      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Vitest Async Integration Tests
          path: test-results.xml
          reporter: java-junit
          fail-on-error: false

  test-events-integration:
    name: test-events-integration
    runs-on: ${{ inputs.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install dependencies
        run: yarn install

      - name: Run events integration tests
        shell: bash
        run: yarn test:events ${{ inputs.coverage && '--coverage' || '' }}
        env:
          DEBUG: ${{ inputs.debug && '*' || '' }}

      - name: Upload coverage (if generated)
        if: inputs.coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.run_id }}-events
          path: coverage/

      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Vitest Events Integration Tests
          path: test-results.xml
          reporter: java-junit
          fail-on-error: false

  test-multi-integration:
    name: test-multi-integration
    runs-on: ${{ inputs.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install dependencies
        run: yarn install

      - name: Run multi integration tests
        shell: bash
        run: yarn test:multi ${{ inputs.coverage && '--coverage' || '' }}
        env:
          DEBUG: ${{ inputs.debug && '*' || '' }}

      - name: Upload coverage (if generated)
        if: inputs.coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.run_id }}-multi
          path: coverage/

      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Vitest Multi Integration Tests
          path: test-results.xml
          reporter: java-junit
          fail-on-error: false

  test-probe-integration:
    name: test-probe-integration
    runs-on: ${{ inputs.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install dependencies
        run: yarn install

      - name: Run probe integration tests
        shell: bash
        run: yarn test:probe ${{ inputs.coverage && '--coverage' || '' }}
        env:
          DEBUG: ${{ inputs.debug && '*' || '' }}

      - name: Upload coverage (if generated)
        if: inputs.coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.run_id }}-probe
          path: coverage/

      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Vitest Probe Integration Tests
          path: test-results.xml
          reporter: java-junit
          fail-on-error: false

  test-cjs-integration:
    name: test-cjs-integration
    runs-on: ${{ inputs.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ inputs.node-version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: Install dependencies
        run: yarn install

      - name: Run CJS integration tests
        shell: bash
        run: yarn test:cjs ${{ inputs.coverage && '--coverage' || '' }}
        env:
          DEBUG: ${{ inputs.debug && '*' || '' }}

      - name: Upload coverage (if generated)
        if: inputs.coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.run_id }}-cjs
          path: coverage/

      - name: Publish Test Results
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Vitest CJS Integration Tests
          path: test-results.xml
          reporter: java-junit
          fail-on-error: false
